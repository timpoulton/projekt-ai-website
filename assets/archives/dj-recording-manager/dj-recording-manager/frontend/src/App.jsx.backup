import { useState, useEffect } from 'react';
import { Button } from './components/Button';
import { Play, Square } from 'lucide-react';
import axios from 'axios';

const API_BASE_URL = 'http://localhost:3001';

function App() {
  const [recording, setRecording] = useState(false);
  const [currentRecordingName, setCurrentRecordingName] = useState('');
  const [error, setError] = useState(null);

  const startRecording = async () => {
    try {
      setError(null); // Clear any previous errors
      console.log('Starting recording...'); // Debug log
      
      const name = `Recording_${new Date().toISOString().split('.')[0].replace(/[:]/g, '-')}`;
      console.log('Generated name:', name); // Debug log
      
      setCurrentRecordingName(name);
      
      const response = await axios.post(`${API_BASE_URL}/api/recording/start`, { 
        name: name 
      });
      
      console.log('Server response:', response.data); // Debug log
      
      setRecording(true);
    } catch (error) {
      console.error('Failed to start recording:', error.response?.data || error.message);
      setError(error.response?.data?.error || error.message);
    }
  };

  const stopRecording = async () => {
    try {
      setError(null);
      console.log('Stopping recording...'); // Debug log
      
      const response = await axios.post(`${API_BASE_URL}/api/recording/stop`);
      console.log('Server response:', response.data); // Debug log
      
      setRecording(false);
      setCurrentRecordingName('');
    } catch (error) {
      console.error('Failed to stop recording:', error.response?.data || error.message);
      setError(error.response?.data?.error || error.message);
    }
  };

  // Add effect to check server connection on mount
  useEffect(() => {
    const checkServer = async () => {
      try {
        await axios.get(`${API_BASE_URL}/api/schedules`);
        console.log('Server connection successful');
      } catch (error) {
        console.error('Server connection failed:', error);
        setError('Cannot connect to server');
      }
    };
    checkServer();
  }, []);

  return (
    <div className="min-h-screen bg-background p-8">
      <div className="max-w-7xl mx-auto space-y-8">
        {/* Header */}
        <div className="flex justify-between items-center">
          <h1 className="text-4xl font-bold">DJ Recording Manager</h1>
        </div>

        {/* Error Display */}
        {error && (
          <div className="bg-destructive/10 text-destructive px-4 py-3 rounded-lg">
            {error}
          </div>
        )}

        {/* Main Controls */}
        <div className="bg-card rounded-lg shadow-sm p-6">
          <h2 className="text-2xl font-semibold mb-4">Recording Control</h2>
          <div className="space-y-4">
            {recording ? (
              <div>
                <div className="mb-4">
                  <p className="text-sm text-muted-foreground">Currently Recording:</p>
                  <p className="font-medium">{currentRecordingName}</p>
                </div>
                <Button
                  variant="destructive"
                  className="w-full"
                  onClick={stopRecording}
                >
                  <Square className="w-4 h-4 mr-2" />
                  Stop Recording
                </Button>
              </div>
            ) : (
              <Button
                className="w-full"
                onClick={startRecording}
              >
                <Play className="w-4 h-4 mr-2" />
                Start Recording
              </Button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

export default App;
